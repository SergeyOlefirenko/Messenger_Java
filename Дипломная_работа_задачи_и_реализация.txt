Приветственный Аватар

1. Реализовать Аватары отображаемые после регистрации: 

а) При регистрации мужского пола отображение аватара мальчика после регистрации - выполнено.

б) При регистрации женского пола отображение аватара девочки после регистрации - не выполнено. 

Ввиду сложности настройки координат и недостаточного количества времени, возможно, для девочки использую только изменение формы волос оставив аватар в прежнем виде. Изначально задумка была сделать девочку катающуюсся на качели но возник вопрос как она будет держать ноутбук и как правильно управлять изменением формы тела, ноутбука и т.д. при повороте осей, да и логика работы css, в этом случае, будет еще сложнее уже реализованной, которая заняла почти 2 месяца. Думаю, что девочку придется делать, так сказать, из ребра Адама. Очень жалею, что не начал с девочки еще в августе и пошел по более простому пути...

Навигационная панель.

1. Реализовать навигационну панель. Режим навигационной панели для мобильного телефона и планшета уже реализован. Частично выполнено
Задача как реализовать выпадающие списки в режиме РС

2. Мысли по этому поводу: 
2.1. Создать еще один JSON file для sidebar laptop
2.2. Перебрать циклом items через map или forEach (возможно нужно будет использовать filter чтобы выбирать childrens только одного конкретного элемента)
2.3. Открывать селектор таким же способом как гамбургер, задав 2 значения открыто и закрыто но уже для item выбранного через мар
2.4. Значения задать для item в json таким образом они будет работать одинаково для всех элементов
2.5. Нужно задать для каждого item в map отдельный блок div и присвоить ему класс так как мы будем работать с координатами, и, возможно, придется реализовать различные свойства и дизайн для каждого элемента. Здесь нужно подумать. 

Реализацию нужно будет выполнить после написания серверной части на Java и тестирования работы чата.

Сервер

1. Реализовать тестовый сервер на Spring Boot Java и попробовать выполнить соединение с React через web socket. Выполнено. Подключение с помощью stomp работает и запросы со стороны React поступают.

2. Реализовать базу данных на MariaDB как было оговорено с Максимом. Частично выполнено. Данные запросов сохраняются. 

3. Реализовать связи OneToMany c таблицы User к таблице Massage и ManyToOne с таблицы Massage к таблице User. Выполнено

4. В тестовой версии базы данных, не подумав, совершил ряд сошибок: 
1.1. Первое, что нужно было сделать - продумать механизм регистрации пользователя и уже потом, от его имени, выполнять запросы к базе данных. 
1.2. Ввиду не правильно решенной логики в базу данных поступает message со всеми данными пользователя и с каждым новым message меняется id
пользователя, что недопустимо.
Данный вопрос, вроде решен но теперь есть проблемы с запросами со стороны UI как правильно передавать в базу данных требуемые параметры.
Для меня это будет наукой, что нужно сразу полностью продумывать всю логику от начала до конца и выполнять реализацию маленькими шагами. 
В итоге 10 дней времени потрачено впустую и придется заново переписывать логику.

UI

1. Реализовать подключение к серверу Java. Выполнено.

2. Реализовать простой тестовый чат (заготовку). Выполнено

3. Реализовать добавление пользователей в базу данных mariaDB. Выполнено

4. Реализовать добавление сообщений пользователей в базу данных mariaDB. Не выполнено

4. Реализовать панель инструментов для доступа к истории чата/чатов, добавления и отправки файлов, редактирования и удаления чатов. Не выполнено.

BackEnd

1. Реализовать логику регистрации пользователя. Не выполнено
2. Реализовать валидацию пользователя. Не выполнено
3. Реализовать возможность изменения и удаления информации передаваемой в базу данных. Не выполнено.
4. Реализовать получение фото/видео и других файлов из базы данных и передачи данных в слайдер на стороне React. Не выполнено.


FrontEnd

1. Выполнить адаптивность к разным типам экранов. Не выполнено
2. Проработать дизайн пользовательского интерфейса. Не выполнено
3. Добавить приветственную заставку при запуске программы. Не выполнено. Частично в стадии проработки логики.
4. Переключение темы темная/светлая. Не выполнено
5. Проработка логики изменения темы в зависимости от времени суток. Необходимо реализовать таймер с переключением темы в зависимости от времени суток. Привязать таймер к текущему времени утройства. Реализовать три или 4 темы, нужно подумать относительно времени года и для весенне-летних месяцев использовать 4 темы по 6 часов, а для осенне-зимней темы - 3 темы по 8 часов. Не выполнено

